{"version":3,"file":"tdex-sdk.esm.js","sources":["../src/core.ts","../src/utils.ts","../src/swap.ts","../src/wallet.ts","../src/grpcClient.ts","../src/trade.ts"],"sourcesContent":["export interface CoreInterface {\n  verbose?: Boolean;\n  chain?: string;\n  providerUrl?: string;\n  explorerUrl?: string;\n}\n\nexport default class Core {\n  public verbose?: Boolean = false;\n  public chain?: string = 'regtest';\n  public providerUrl?: string;\n  public explorerUrl?: string;\n\n  constructor(data?: SafePick<Core>) {\n    Object.assign(this, data);\n  }\n}\n\ntype NonMethodKeys<T> = ({\n  [P in keyof T]: T[P] extends Function ? never : P;\n} & { [x: string]: never })[keyof T];\ntype SafePick<T> = Pick<T, NonMethodKeys<T>>;\n","import JSBI from 'jsbi';\nimport { confidential, Psbt, Transaction } from 'liquidjs-lib';\n\nconst HUNDRED = JSBI.BigInt(100);\nconst TENTHOUSAND = JSBI.multiply(HUNDRED, HUNDRED);\n\nexport function toAssetHash(x: Buffer): string {\n  const withoutFirstByte = x.slice(1);\n  return withoutFirstByte.reverse().toString('hex');\n}\n\nexport function toNumber(x: Buffer): number {\n  return confidential.confidentialValueToSatoshi(x);\n}\n\nfunction minusFee(amount: JSBI, fee: JSBI): Array<JSBI> {\n  const calculatedFee = JSBI.multiply(JSBI.divide(amount, TENTHOUSAND), fee);\n  return [JSBI.subtract(amount, calculatedFee), calculatedFee];\n}\n\nfunction plusFee(amount: JSBI, fee: JSBI): Array<JSBI> {\n  const calculatedFee = JSBI.multiply(JSBI.divide(amount, TENTHOUSAND), fee);\n  return [JSBI.add(amount, calculatedFee), calculatedFee];\n}\n\nexport function calculateExpectedAmount(\n  proposeBalance: number,\n  receiveBalance: number,\n  proposedAmount: number,\n  feeWithDecimals: number\n): number {\n  const PBALANCE = JSBI.BigInt(proposeBalance);\n  const RBALANCE = JSBI.BigInt(receiveBalance);\n  const PAMOUNT = JSBI.BigInt(proposedAmount);\n  const FEE = JSBI.BigInt(feeWithDecimals * 100);\n\n  const invariant = JSBI.multiply(PBALANCE, RBALANCE);\n  const newProposeBalance = JSBI.add(PBALANCE, PAMOUNT);\n  const newReceiveBalance = JSBI.divide(invariant, newProposeBalance);\n  const expectedAmount = JSBI.subtract(RBALANCE, newReceiveBalance);\n  const [expectedAmountMinusFee] = minusFee(expectedAmount, FEE);\n  return JSBI.toNumber(expectedAmountMinusFee);\n}\n\nexport function calculateProposeAmount(\n  proposeBalance: number,\n  receiveBalance: number,\n  expectedAmount: number,\n  feeWithDecimals: number\n): number {\n  const PBALANCE = JSBI.BigInt(proposeBalance);\n  const RBALANCE = JSBI.BigInt(receiveBalance);\n  const RAMOUNT = JSBI.BigInt(expectedAmount);\n  const FEE = JSBI.BigInt(feeWithDecimals * 100);\n\n  const invariant = JSBI.multiply(PBALANCE, RBALANCE);\n  const newReceiveBalance = JSBI.subtract(RBALANCE, RAMOUNT);\n  const newProposeBalance = JSBI.divide(invariant, newReceiveBalance);\n  const proposeAmount = JSBI.subtract(newProposeBalance, PBALANCE);\n  const [proposeAmountPlusFee] = plusFee(proposeAmount, FEE);\n  return JSBI.toNumber(proposeAmountPlusFee);\n}\n\nexport function makeid(length: number): string {\n  let result = '';\n  const characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function decodePsbt(\n  psbtBase64: string\n): { psbt: Psbt; transaction: Transaction } {\n  let psbt: Psbt;\n  try {\n    psbt = Psbt.fromBase64(psbtBase64);\n  } catch (ignore) {\n    throw new Error('Invalid psbt');\n  }\n\n  const bufferTx = psbt.data.globalMap.unsignedTx.toBuffer();\n  const transaction = Transaction.fromBuffer(bufferTx);\n  return {\n    psbt,\n    transaction,\n  };\n}\n\nexport interface UtxoInterface {\n  txid: string;\n  vout: number;\n  asset: string;\n  value: number;\n  script?: string;\n}\n\nexport function coinselect(utxos: Array<UtxoInterface>, amount: number) {\n  let unspents = [];\n  let availableSat = 0;\n  let change = 0;\n\n  for (let i = 0; i < utxos.length; i++) {\n    const utxo = utxos[i];\n    unspents.push({\n      txid: utxo.txid,\n      vout: utxo.vout,\n      value: utxo.value,\n      asset: utxo.asset,\n    });\n    availableSat += utxo.value;\n\n    if (availableSat >= amount) break;\n  }\n\n  if (availableSat < amount)\n    throw new Error('You do not have enough in your wallet');\n\n  change = availableSat - amount;\n\n  return { unspents, change };\n}\n\nexport function isValidAmount(amount: number): boolean {\n  if (amount <= 0 || !Number.isSafeInteger(amount)) return false;\n  return true;\n}\n","import Core from './core';\nimport * as proto from 'tdex-protobuf/js/swap_pb';\nimport { makeid, toNumber, toAssetHash, decodePsbt } from './utils';\n\nexport class Swap extends Core {\n  static parse = parse;\n\n  request({\n    assetToBeSent,\n    amountToBeSent,\n    assetToReceive,\n    amountToReceive,\n    psbtBase64,\n  }: {\n    assetToBeSent: string;\n    amountToBeSent: number;\n    assetToReceive: string;\n    amountToReceive: number;\n    psbtBase64: string;\n  }): Uint8Array {\n    // Check amounts\n\n    const msg = new proto.SwapRequest();\n    msg.setId(makeid(8));\n    msg.setAmountP(amountToBeSent);\n    msg.setAssetP(assetToBeSent);\n    msg.setAmountR(amountToReceive);\n    msg.setAssetR(assetToReceive);\n    msg.setTransaction(psbtBase64);\n\n    compareMessagesAndTransaction(msg);\n\n    if (this.verbose) console.log(msg.toObject());\n\n    return msg.serializeBinary();\n  }\n\n  accept({\n    message,\n    psbtBase64,\n  }: {\n    message: Uint8Array;\n    psbtBase64: string;\n  }): Uint8Array {\n    const msgRequest = proto.SwapRequest.deserializeBinary(message);\n    // Build Swap Accepr message\n    const msgAccept = new proto.SwapAccept();\n    msgAccept.setId(makeid(8));\n    msgAccept.setRequestId(msgRequest.getId());\n    msgAccept.setTransaction(psbtBase64);\n\n    compareMessagesAndTransaction(msgRequest, msgAccept);\n\n    if (this.verbose) console.log(msgAccept.toObject());\n\n    return msgAccept.serializeBinary();\n  }\n\n  complete({\n    message,\n    psbtBase64,\n  }: {\n    message: Uint8Array;\n    psbtBase64: string;\n  }): Uint8Array {\n    //First validate signatures\n    const { psbt } = decodePsbt(psbtBase64);\n\n    if (!psbt.validateSignaturesOfAllInputs())\n      throw new Error('Signatures not valid');\n\n    const msgAccept = proto.SwapAccept.deserializeBinary(message);\n    //Build SwapComplete\n    const msgComplete = new proto.SwapComplete();\n    msgComplete.setId(makeid(8));\n    msgComplete.setAcceptId(msgAccept.getId());\n    msgComplete.setTransaction(psbtBase64);\n\n    if (this.verbose) console.log(msgAccept.toObject());\n\n    return msgComplete.serializeBinary();\n  }\n}\n\nfunction compareMessagesAndTransaction(\n  msgRequest: proto.SwapRequest,\n  msgAccept?: proto.SwapAccept\n) {\n  const decodedFromRequest = decodePsbt(msgRequest.getTransaction());\n\n  const totalP = countUtxos(\n    decodedFromRequest.psbt.data.inputs,\n    msgRequest.getAssetP()\n  );\n  if (totalP < msgRequest.getAmountP())\n    throw new Error(\n      'Cumulative utxos count is not enough to cover SwapRequest.amount_p'\n    );\n\n  const outputRFound = outputFoundInTransaction(\n    decodedFromRequest.transaction.outs,\n    msgRequest.getAmountR(),\n    msgRequest.getAssetR()\n  );\n  if (!outputRFound)\n    throw new Error(\n      'Either SwapRequest.amount_r or SwapRequest.asset_r do not match the provided psbt'\n    );\n\n  if (msgAccept) {\n    const decodedFromAccept = decodePsbt(msgAccept.getTransaction());\n    if (msgRequest.getId() !== msgAccept.getRequestId())\n      throw new Error(\n        'SwapRequest.id and SwapAccept.request_id are not the same'\n      );\n\n    const totalR = countUtxos(\n      decodedFromAccept.psbt.data.inputs,\n      msgRequest.getAssetR()\n    );\n    if (totalR < msgRequest.getAmountR())\n      throw new Error(\n        'Cumulative utxos count is not enough to cover SwapRequest.amount_r'\n      );\n\n    const outputPFound = outputFoundInTransaction(\n      decodedFromAccept.transaction.outs,\n      msgRequest.getAmountP(),\n      msgRequest.getAssetP()\n    );\n    if (!outputPFound)\n      throw new Error(\n        'Either SwapRequest.amount_p or SwapRequest.asset_p do not match the provided psbt'\n      );\n  }\n}\n\nfunction outputFoundInTransaction(\n  outputs: Array<any>,\n  value: number,\n  asset: string\n) {\n  const found = outputs.find(\n    (o: any) => toNumber(o.value) === value && toAssetHash(o.asset) === asset\n  );\n\n  return found !== undefined;\n}\n\nfunction countUtxos(utxos: Array<any>, asset: string): number {\n  return utxos\n    .filter((i: any) => toAssetHash(i.witnessUtxo!.asset) === asset)\n    .map((i: any) => toNumber(i.witnessUtxo!.value))\n    .reduce((a: any, b: any) => a + b, 0);\n}\n\nfunction parse({\n  message,\n  type,\n}: {\n  message: Uint8Array;\n  type: string;\n}): string {\n  let msg: any;\n  try {\n    msg = (proto as any)[type].deserializeBinary(message);\n  } catch (e) {\n    throw new Error(`Not valid message of expected type ${type}`);\n  }\n\n  return JSON.stringify(msg.toObject(), undefined, 2);\n}\n","import axios from 'axios';\nimport { ECPair, networks, payments, Psbt, confidential } from 'liquidjs-lib';\n//Libs\nimport { coinselect } from './utils';\n//Types\nimport { ECPairInterface } from 'liquidjs-lib/types/ecpair';\nimport { Network } from 'liquidjs-lib/types/networks';\n\nexport interface WatchOnlyWalletInterface {\n  address: string;\n  script: string;\n  network: Network;\n  updateTx(\n    psbtBase64: string,\n    inputs: Array<any>,\n    inputAmount: number,\n    outputAmount: number,\n    inputAsset: string,\n    outputAsset: string\n  ): string;\n}\n\nexport class WatchOnlyWallet implements WatchOnlyWalletInterface {\n  network: Network;\n  address: string;\n  script: string;\n  constructor({ address, network }: { address: string; network: Network }) {\n    const payment = payments.p2wpkh({ address, network });\n\n    this.network = network;\n    this.address = payment.address!;\n    this.script = payment.output!.toString('hex');\n  }\n\n  static fromAddress = fromAddress;\n  static createTx = createTx;\n  static toHex = toHex;\n\n  updateTx(\n    psbtBase64: string,\n    inputs: Array<any>,\n    inputAmount: number,\n    outputAmount: number,\n    inputAsset: string,\n    outputAsset: string\n  ): string {\n    let psbt: Psbt;\n    try {\n      psbt = Psbt.fromBase64(psbtBase64);\n    } catch (ignore) {\n      throw new Error('Invalid psbt');\n    }\n\n    inputs = inputs.filter((utxo: any) => utxo.asset === inputAsset);\n    const { unspents, change } = coinselect(inputs, inputAmount);\n\n    unspents.forEach((i: any) =>\n      psbt.addInput({\n        // if hash is string, txid, if hash is Buffer, is reversed compared to txid\n        hash: i.txid,\n        index: i.vout,\n        //The scriptPubkey and the value only are needed.\n        witnessUtxo: {\n          script: Buffer.from(this.script, 'hex'),\n          asset: Buffer.concat([\n            Buffer.from('01', 'hex'), //prefix for unconfidential asset\n            Buffer.from(inputAsset, 'hex').reverse(),\n          ]),\n          value: confidential.satoshiToConfidentialValue(i.value),\n          nonce: Buffer.from('00', 'hex'),\n        },\n      } as any)\n    );\n\n    psbt.addOutput({\n      script: Buffer.from(this.script, 'hex'),\n      value: confidential.satoshiToConfidentialValue(outputAmount),\n      asset: Buffer.concat([\n        Buffer.from('01', 'hex'), //prefix for unconfidential asset\n        Buffer.from(outputAsset, 'hex').reverse(),\n      ]),\n      nonce: Buffer.from('00', 'hex'),\n    });\n\n    if (change > 0) {\n      psbt.addOutput({\n        script: Buffer.from(this.script, 'hex'),\n        value: confidential.satoshiToConfidentialValue(change),\n        asset: Buffer.concat([\n          Buffer.from('01', 'hex'), //prefix for unconfidential asset\n          Buffer.from(inputAsset, 'hex').reverse(),\n        ]),\n        nonce: Buffer.from('00', 'hex'),\n      });\n    }\n\n    const base64 = psbt.toBase64();\n    return base64;\n  }\n}\n\nexport interface WalletInterface extends WatchOnlyWalletInterface {\n  keyPair: ECPairInterface;\n  privateKey: string;\n  publicKey: string;\n  sign(psbtBase64: string): string;\n}\n\nexport class Wallet extends WatchOnlyWallet implements WalletInterface {\n  keyPair: ECPairInterface;\n  privateKey: string;\n  publicKey: string;\n\n  static fromWIF = fromWIF;\n  static fromRandom = fromRandom;\n\n  constructor({\n    network,\n    address,\n    keyPair,\n  }: {\n    network: Network;\n    address: string;\n    keyPair: ECPairInterface | undefined;\n  }) {\n    super({ network, address });\n\n    if (!keyPair) this.keyPair = ECPair.makeRandom({ network: this.network });\n    else this.keyPair = keyPair;\n\n    this.privateKey = this.keyPair.privateKey!.toString('hex');\n    this.publicKey = this.keyPair.publicKey!.toString('hex');\n  }\n\n  updateTx = super.updateTx;\n\n  sign(psbtBase64: string): string {\n    let psbt: Psbt;\n    try {\n      psbt = Psbt.fromBase64(psbtBase64);\n    } catch (ignore) {\n      throw new Error('Invalid psbt');\n    }\n\n    psbt.data.inputs.forEach((p: any, i: number) => {\n      if (p.witnessUtxo!.script.toString('hex') === this.script) {\n        psbt.signInput(i, this.keyPair);\n        if (!psbt.validateSignaturesOfInput(i))\n          throw new Error('Invalid signature');\n      }\n    });\n\n    return psbt.toBase64();\n  }\n}\n\nfunction fromAddress(\n  address: string,\n  network?: string\n): WatchOnlyWalletInterface {\n  const _network = network ? (networks as any)[network] : networks.liquid;\n\n  try {\n    return new WatchOnlyWallet({\n      address,\n      network: _network,\n    });\n  } catch (ignore) {\n    throw new Error('fromAddress: Invalid address or network');\n  }\n}\n\nfunction fromRandom(network?: string): WalletInterface {\n  const _network = network ? (networks as any)[network] : networks.liquid;\n  try {\n    const keyPair = ECPair.makeRandom({ network: _network });\n    const { address } = payments.p2wpkh({\n      pubkey: keyPair.publicKey,\n      network: _network,\n    });\n    return new Wallet({ keyPair, network: _network, address: address! });\n  } catch (ignore) {\n    throw new Error('fromRandom: Failed to create wallet');\n  }\n}\n\nfunction fromWIF(wif: string, network?: string): WalletInterface {\n  const _network = network ? (networks as any)[network] : networks.liquid;\n\n  try {\n    const keyPair = ECPair.fromWIF(wif, _network);\n    const { address } = payments.p2wpkh({\n      pubkey: keyPair.publicKey,\n      network: _network,\n    });\n    return new Wallet({ keyPair, network: _network, address: address! });\n  } catch (ignore) {\n    throw new Error('fromWIF: Invalid keypair');\n  }\n}\n\nfunction createTx(network?: string): string {\n  const _network = network ? (networks as any)[network] : networks.liquid;\n  const psbt = new Psbt({ network: _network });\n  return psbt.toBase64();\n}\n\nfunction toHex(psbtBase64: string): string {\n  let psbt: Psbt;\n  try {\n    psbt = Psbt.fromBase64(psbtBase64);\n  } catch (ignore) {\n    throw new Error('Invalid psbt');\n  }\n\n  psbt.validateSignaturesOfAllInputs();\n  psbt.finalizeAllInputs();\n\n  return psbt.extractTransaction().toHex();\n}\n\nexport async function fetchUtxos(address: string, url: string): Promise<any> {\n  return (await axios.get(`${url}/address/${address}/utxo`)).data;\n}\n\nexport async function fetchBalances(address: string, url: string) {\n  const utxos = await fetchUtxos(address, url);\n  return utxos.reduce(\n    (storage: { [x: string]: any }, item: { [x: string]: any; value: any }) => {\n      // get the first instance of the key by which we're grouping\n      var group = item['asset'];\n\n      // set `storage` for this instance of group to the outer scope (if not empty) or initialize it\n      storage[group] = storage[group] || 0;\n\n      // add this item to its group within `storage`\n      storage[group] += item.value;\n\n      // return the updated storage to the reduce function, which will then loop through the next\n      return storage;\n    },\n    {}\n  ); // {} is the initial value of the storage\n}\n","import * as grpc from '@grpc/grpc-js';\nimport * as services from 'tdex-protobuf/js/trade_grpc_pb';\nimport * as messages from 'tdex-protobuf/js/trade_pb';\nimport { SwapRequest, SwapComplete } from 'tdex-protobuf/js/swap_pb';\n\nimport TraderClientInterface from './grpcClientInterface';\n\nexport class TraderClient implements TraderClientInterface {\n  providerUrl: string;\n  client: services.TradeClient;\n  constructor(providerUrl: string) {\n    this.providerUrl = providerUrl;\n    this.client = new services.TradeClient(\n      providerUrl,\n      grpc.credentials.createInsecure()\n    );\n  }\n\n  /**\n   * tradePropose\n   * @param market\n   * @param tradeType\n   * @param swapRequestSerialized\n   */\n\n  tradePropose(\n    { baseAsset, quoteAsset }: any,\n    tradeType: number,\n    swapRequestSerialized: Uint8Array\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const market = new messages.Market();\n      market.setBaseAsset(baseAsset);\n      market.setQuoteAsset(quoteAsset);\n\n      const request = new messages.TradeProposeRequest();\n      request.setMarket(market);\n      request.setType(tradeType);\n      request.setSwapRequest(\n        SwapRequest.deserializeBinary(swapRequestSerialized)\n      );\n\n      const call = this.client.tradePropose(request);\n      let data: Uint8Array;\n      call.on('data', (reply: messages.TradeProposeReply) => {\n        const swapAcceptMsg = reply!.getSwapAccept();\n        data = swapAcceptMsg!.serializeBinary();\n      });\n\n      call.on('end', () => resolve(data));\n      call.on('error', (e: any) => reject(e));\n    });\n  }\n\n  /**\n   * tradeComplete\n   * @param swapCompleteSerialized\n   */\n\n  tradeComplete(swapCompleteSerialized: Uint8Array): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const request = new messages.TradeCompleteRequest();\n      request.setSwapComplete(\n        SwapComplete.deserializeBinary(swapCompleteSerialized)\n      );\n      const call = this.client.tradeComplete(request);\n      let data: string;\n      call.on('data', (reply: messages.TradeCompleteReply) => {\n        data = reply!.getTxid();\n      });\n      call.on('end', () => resolve(data));\n      call.on('error', (e: any) => reject(e));\n    });\n  }\n\n  markets(): Promise<Array<any>> {\n    return new Promise((resolve, reject) => {\n      this.client.markets(new messages.MarketsRequest(), (err, response) => {\n        if (err) return reject(err);\n        const list = response!\n          .getMarketsList()\n          .map((item: any) => item!.getMarket())\n          .map((market: any) => ({\n            baseAsset: market!.getBaseAsset(),\n            quoteAsset: market!.getQuoteAsset(),\n          }));\n        resolve(list);\n      });\n    });\n  }\n\n  balances({\n    baseAsset,\n    quoteAsset,\n  }: {\n    baseAsset: string;\n    quoteAsset: string;\n  }): Promise<any> {\n    const market = new messages.Market();\n    market.setBaseAsset(baseAsset);\n    market.setQuoteAsset(quoteAsset);\n    const request = new messages.BalancesRequest();\n    request.setMarket(market);\n\n    return new Promise((resolve, reject) => {\n      this.client.balances(request, (err, response) => {\n        if (err) return reject(err);\n\n        const baseAmount: number = response\n          .getBalancesList()\n          .find(b => b.getAsset() === baseAsset)!\n          .getAmount();\n        const quoteAmount: number = response\n          .getBalancesList()\n          .find(b => b.getAsset() === quoteAsset)!\n          .getAmount();\n        const reply = {\n          fee: response!.getFee(),\n          balances: {\n            [baseAsset]: baseAmount,\n            [quoteAsset]: quoteAmount,\n          },\n        };\n        resolve(reply);\n      });\n    });\n  }\n}\n","import Core, { CoreInterface } from './core';\nimport { Swap } from './swap';\nimport {\n  WalletInterface,\n  WatchOnlyWalletInterface,\n  Wallet,\n  WatchOnlyWallet,\n  fetchUtxos,\n} from './wallet';\nimport { TraderClient } from './grpcClient';\nimport TraderClientInterface from './grpcClientInterface';\nimport {\n  calculateExpectedAmount,\n  calculateProposeAmount,\n  isValidAmount,\n} from './utils';\nimport { SwapAccept } from 'tdex-protobuf/js/swap_pb';\n\nexport interface MarketInterface {\n  baseAsset: string;\n  quoteAsset: string;\n}\n\nexport enum TradeType {\n  BUY = 0,\n  SELL = 1,\n}\n\nexport class Trade extends Core implements CoreInterface {\n  private grpcClient: TraderClientInterface;\n\n  constructor(args: CoreInterface) {\n    super(args);\n\n    if (!this.chain)\n      throw new Error(\n        'To be able to trade you need to select the network via { chain }'\n      );\n\n    if (!this.providerUrl)\n      throw new Error(\n        'To be able to trade you need to select a liquidity provider via { providerUrl }'\n      );\n\n    if (!this.explorerUrl)\n      throw new Error(\n        'To be able to trade you need to select an explorer via { explorerUrl }'\n      );\n\n    this.grpcClient = new TraderClient(this.providerUrl);\n  }\n\n  /**\n   * Trade.buy let the trder buy the baseAsset,\n   * sending his own quoteAsset using the current market price\n   */\n  async buy({\n    market,\n    amount,\n    address,\n    privateKey,\n  }: {\n    market: MarketInterface;\n    amount: number; //this is fractional amount\n    address?: string;\n    privateKey?: string;\n  }): Promise<Uint8Array | string> {\n    if (!privateKey && !address)\n      throw new Error(\n        'Either private key or native segwit address is required'\n      );\n\n    if (!privateKey) {\n      const watchOnlyWallet: WatchOnlyWalletInterface = WatchOnlyWallet.fromAddress(\n        address!,\n        this.chain!\n      );\n      const swapAccept = await this.marketOrderRequest(\n        market,\n        TradeType.BUY,\n        amount,\n        watchOnlyWallet\n      );\n      return swapAccept;\n    } else {\n      const wallet: WalletInterface = Wallet.fromWIF(privateKey, this.chain!);\n      const swapAccept = await this.marketOrderRequest(\n        market,\n        TradeType.BUY,\n        amount,\n        wallet\n      );\n      const txid = await this.marketOrderComplete(swapAccept, wallet);\n      return txid;\n    }\n  }\n\n  /**\n   * Trade.sell let the trder sell the baseAsset,\n   * receiving the quoteAsset using the current market price\n   */\n\n  async sell({\n    market,\n    amount,\n    address,\n    privateKey,\n  }: {\n    market: MarketInterface;\n    amount: number; // this is fractional amount\n    address?: string;\n    privateKey?: string;\n  }): Promise<Uint8Array | string> {\n    if (!privateKey && !address)\n      throw new Error(\n        'Either private key or native segwit address is required'\n      );\n\n    if (!privateKey) {\n      const watchOnlyWallet: WatchOnlyWalletInterface = WatchOnlyWallet.fromAddress(\n        address!,\n        this.chain!\n      );\n      const swapAccept = await this.marketOrderRequest(\n        market,\n        TradeType.SELL,\n        amount,\n        watchOnlyWallet\n      );\n      return swapAccept;\n    } else {\n      const wallet: WalletInterface = Wallet.fromWIF(privateKey, this.chain!);\n      const swapAccept = await this.marketOrderRequest(\n        market,\n        TradeType.SELL,\n        amount,\n        wallet\n      );\n      const txid = await this.marketOrderComplete(swapAccept, wallet);\n      return txid;\n    }\n  }\n\n  async preview(\n    market: MarketInterface,\n    tradeType: TradeType,\n    amountInSatoshis: number\n  ): Promise<any> {\n    if (!isValidAmount(amountInSatoshis)) {\n      throw new Error('Amount is not valid');\n    }\n    const { baseAsset, quoteAsset } = market;\n\n    const balancesAndFee = await this.grpcClient.balances({\n      baseAsset,\n      quoteAsset,\n    });\n\n    if (tradeType === TradeType.BUY) {\n      const assetToBeSent = quoteAsset;\n      const assetToReceive = baseAsset;\n      const amountToReceive = amountInSatoshis;\n\n      if (amountToReceive > balancesAndFee.balances[assetToReceive])\n        throw new Error('Amount exceeds market balance');\n\n      const amountToBeSent = calculateProposeAmount(\n        balancesAndFee.balances[assetToBeSent],\n        balancesAndFee.balances[assetToReceive],\n        amountToReceive,\n        balancesAndFee.fee\n      );\n\n      return {\n        assetToBeSent,\n        amountToBeSent,\n        assetToReceive,\n        amountToReceive,\n      };\n    } else {\n      const assetToBeSent = baseAsset;\n      const assetToReceive = quoteAsset;\n      const amountToBeSent = amountInSatoshis;\n\n      if (amountToBeSent > balancesAndFee.balances[assetToBeSent])\n        throw new Error('Amount exceeds market balance');\n\n      const amountToReceive = calculateExpectedAmount(\n        balancesAndFee.balances[assetToBeSent],\n        balancesAndFee.balances[assetToReceive],\n        amountToBeSent,\n        balancesAndFee.fee\n      );\n\n      return {\n        assetToBeSent,\n        amountToBeSent,\n        assetToReceive,\n        amountToReceive,\n      };\n    }\n  }\n\n  private async marketOrderRequest(\n    market: MarketInterface,\n    tradeType: TradeType,\n    amountInSatoshis: number,\n    wallet: WalletInterface | WatchOnlyWalletInterface\n  ): Promise<Uint8Array> {\n    const {\n      assetToBeSent,\n      amountToBeSent,\n      assetToReceive,\n      amountToReceive,\n    } = await this.preview(market, tradeType, amountInSatoshis);\n\n    const traderUtxos = await fetchUtxos(wallet.address, this.explorerUrl!);\n\n    const emptyPsbt = Wallet.createTx(this.chain);\n    const psbtBase64 = wallet.updateTx(\n      emptyPsbt,\n      traderUtxos,\n      amountToBeSent,\n      amountToReceive,\n      assetToBeSent,\n      assetToReceive\n    );\n\n    const swap = new Swap();\n    const swapRequestSerialized = swap.request({\n      assetToBeSent,\n      amountToBeSent,\n      assetToReceive,\n      amountToReceive,\n      psbtBase64,\n    });\n\n    // 0 === Buy === receiving base_asset; 1 === sell === receiving base_asset\n    const swapAcceptSerialized: Uint8Array = await this.grpcClient.tradePropose(\n      market,\n      tradeType,\n      swapRequestSerialized\n    );\n\n    return swapAcceptSerialized;\n  }\n\n  private async marketOrderComplete(\n    swapAcceptSerialized: Uint8Array,\n    wallet: WalletInterface\n  ): Promise<string> {\n    // trader need to check the signed inputs by the provider\n    // and add his own inputs if all is correct\n    const swapAcceptMessage = SwapAccept.deserializeBinary(\n      swapAcceptSerialized\n    );\n    const transaction = swapAcceptMessage.getTransaction();\n    const signedPsbt = wallet.sign(transaction);\n\n    // Trader  adds his signed inputs to the transaction\n    const swap = new Swap();\n    const swapCompleteSerialized = swap.complete({\n      message: swapAcceptSerialized,\n      psbtBase64: signedPsbt,\n    });\n\n    // Trader call the tradeComplete endpoint to finalize the swap\n    const txid = await this.grpcClient.tradeComplete(swapCompleteSerialized);\n    return txid;\n  }\n}\n"],"names":["Core","data","Object","assign","HUNDRED","JSBI","BigInt","TENTHOUSAND","multiply","toAssetHash","x","withoutFirstByte","slice","reverse","toString","toNumber","confidential","confidentialValueToSatoshi","minusFee","amount","fee","calculatedFee","divide","subtract","plusFee","add","calculateExpectedAmount","proposeBalance","receiveBalance","proposedAmount","feeWithDecimals","PBALANCE","RBALANCE","PAMOUNT","FEE","invariant","newProposeBalance","newReceiveBalance","expectedAmount","expectedAmountMinusFee","calculateProposeAmount","RAMOUNT","proposeAmount","proposeAmountPlusFee","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","decodePsbt","psbtBase64","psbt","Psbt","fromBase64","ignore","Error","bufferTx","globalMap","unsignedTx","toBuffer","transaction","Transaction","fromBuffer","coinselect","utxos","unspents","availableSat","change","utxo","push","txid","vout","value","asset","isValidAmount","Number","isSafeInteger","Swap","request","assetToBeSent","amountToBeSent","assetToReceive","amountToReceive","msg","proto","setId","setAmountP","setAssetP","setAmountR","setAssetR","setTransaction","compareMessagesAndTransaction","verbose","console","log","toObject","serializeBinary","accept","message","msgRequest","deserializeBinary","msgAccept","setRequestId","getId","complete","validateSignaturesOfAllInputs","msgComplete","setAcceptId","parse","decodedFromRequest","getTransaction","totalP","countUtxos","inputs","getAssetP","getAmountP","outputRFound","outputFoundInTransaction","outs","getAmountR","getAssetR","decodedFromAccept","getRequestId","totalR","outputPFound","outputs","found","find","o","undefined","filter","witnessUtxo","map","reduce","a","b","type","e","JSON","stringify","fetchBalances","address","url","fetchUtxos","storage","item","group","axios","get","WatchOnlyWallet","network","payment","payments","p2wpkh","script","output","updateTx","inputAmount","outputAmount","inputAsset","outputAsset","forEach","addInput","hash","index","Buffer","from","concat","satoshiToConfidentialValue","nonce","addOutput","base64","toBase64","fromAddress","createTx","toHex","Wallet","keyPair","ECPair","makeRandom","privateKey","publicKey","sign","p","signInput","validateSignaturesOfInput","fromWIF","fromRandom","_network","networks","liquid","pubkey","wif","finalizeAllInputs","extractTransaction","TraderClient","providerUrl","client","services","grpc","createInsecure","tradePropose","tradeType","swapRequestSerialized","baseAsset","quoteAsset","Promise","resolve","reject","market","messages","setBaseAsset","setQuoteAsset","setMarket","setType","setSwapRequest","SwapRequest","call","on","reply","swapAcceptMsg","getSwapAccept","tradeComplete","swapCompleteSerialized","setSwapComplete","SwapComplete","getTxid","markets","err","response","list","getMarketsList","getMarket","getBaseAsset","getQuoteAsset","balances","baseAmount","getBalancesList","getAsset","getAmount","quoteAmount","getFee","TradeType","Trade","args","chain","explorerUrl","grpcClient","buy","watchOnlyWallet","marketOrderRequest","BUY","wallet","swapAccept","marketOrderComplete","sell","SELL","preview","amountInSatoshis","balancesAndFee","traderUtxos","emptyPsbt","swap","swapAcceptSerialized","swapAcceptMessage","SwapAccept","signedPsbt"],"mappings":"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"}